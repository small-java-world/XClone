---
description: 共通のコーディングルール
globs: backend/src/main/kotlin/com/example/xclone/**/*.kt,frontend/src/**/*.{ts,tsx}
alwaysApply: true
---
# Common Rules

技術スタック:
  バックエンド:
    言語・フレームワーク: Kotlin + Spring Boot
    Javaバージョン: Java 21
    ユニットテスト: Kotest + Mockk
    環境変数:
      概要: 環境変数を最大限に活用
      ローカル開発: .env.local を Spring Boot 起動時に読み込み
    ORM: jOOQ
  
  設計思想:
    アーキテクチャ: クリーンアーキテクチャとDDDの原則に従う
    ドメイン境界: ドメイン境界を強く意識し、パッケージ名をドメイン境界に基づいて決定
    アプリケーションサービス:
      命名規則: XXXUseCase
      原則: 単一責務を厳守
      引数形式: XXXCommand を使用
  
  AI駆動開発:
    ツール: AI Editor Cursor のエージェントを利用
    ルール: 人間はコードを1文字も書かない
  
  TDD:
    概要: テスト駆動開発（TDD）を採用
  
  データベース:
    メインDB: MySQL
    キャッシュ: Redis
    UUID最適化: UUIDをBINARY(16)型で保存し、タイムスタンプビットのスワップによりインデックス効率向上
  
  ストレージ:
    S3互換: 
      種類: MinIO
      用途: S3互換ストレージとして利用
      環境: ローカル開発環境で利用
  
  フロントエンド:
    フレームワーク: Next.js
    ユニットテスト: Vitest
  
  E2Eテスト:
    ツール: Playwright
  
  開発環境:
    コンテナ: Docker Compose で動作

## クリーンアーキテクチャ構造
```
backend/src/main/kotlin/com/example/xclone/
├── domain/                # ドメイン層
│   ├── common/            # 共通のドメインコンポーネント
│   │   ├── exception/     # ドメイン例外
│   │   └── valueobject/   # 共通の値オブジェクト
│   ├── user/              # ユーザードメイン
│   │   ├── entity/        # エンティティ
│   │   ├── repository/    # リポジトリインターフェース
│   │   ├── service/       # ドメインサービス
│   │   └── valueobject/   # 値オブジェクト
│   ├── post/              # 投稿ドメイン
│   ├── follow/            # フォロードメイン
│   ├── notification/      # 通知ドメイン
│   └── timeline/          # タイムラインドメイン
│
├── application/           # アプリケーション層
│   ├── config/            # アプリケーション設定
│   ├── user/              # ユーザードメインのユースケース
│   │   ├── command/       # コマンドオブジェクト
│   │   ├── dto/           # レスポンスDTO
│   │   └── usecase/       # ユースケースクラス
│   ├── post/              # 投稿ドメインのユースケース
│   ├── follow/            # フォロードメインのユースケース
│   ├── notification/      # 通知ドメインのユースケース
│   └── timeline/          # タイムラインドメインのユースケース
│
├── infrastructure/        # インフラストラクチャ層
│   ├── config/            # 技術的な設定
│   ├── persistence/       # 永続化の実装
│   │   ├── jooq/          # jOOQ関連の設定
│   │   ├── repository/    # リポジトリ実装
│   │   │   ├── user/      # ユーザーリポジトリ実装
│   │   │   ├── post/      # 投稿リポジトリ実装
│   │   │   └── ...        # その他のリポジトリ実装
│   │   └── mapper/        # エンティティとデータベースレコードのマッパー
│   ├── security/          # セキュリティ関連
│   ├── cache/             # Redisキャッシュ実装
│   └── storage/           # ストレージ実装
│       └── s3/            # S3/MinIO実装
│
└── presentation/          # プレゼンテーション層
    ├── config/            # プレゼンテーション設定
    ├── controller/        # APIコントローラー
    │   ├── user/          # ユーザーコントローラー
    │   ├── post/          # 投稿コントローラー
    │   └── ...            # その他のコントローラー
    ├── request/           # リクエストモデル
    ├── response/          # レスポンスモデル
    ├── advice/            # グローバル例外ハンドラー
    └── filter/            # リクエストフィルター
```

## 集約間の参照ルール
- 集約ルート間の参照はIDのみを使用する
- 他の集約のエンティティを直接参照しない
- 他の集約のリポジトリを直接利用しない
- 集約間の整合性はアプリケーションサービスで管理する
- 複数集約にまたがる操作はアプリケーションサービスで実装する

## 共通コンポーネント
- 例外クラスは共通パッケージに配置
- 設定クラスは共通パッケージに配置
- ユーティリティは最小限に抑え、特定のドメインに依存しないようにする

## ビルド・デプロイ
- Gradle Kotlin DSLを使用
- 依存関係はバージョンカタログで管理
- Docker Composeによる開発環境構築

## 開発ワークフロー
- 機能開発はドメインモデルから開始
- テストはドメインモデル→アプリケーションサービス→アダプターの順に作成
- コミットメッセージは「feat:」「fix:」などのプレフィックスを使用

## セキュリティ
- 認証情報は環境変数で管理
- パスワードはBCryptでハッシュ化
- APIエンドポイントは適切な認証を実施

## データアクセス最適化
- N+1問題を回避するクエリ設計
- 適切なインデックス設計
- Redisによるキャッシュ戦略
- 重い処理は非同期で実行
- UUIDはBINARY(16)型で保存し、タイムスタンプビットのスワップによりインデックス効率向上
