---
description: 
globs: 
alwaysApply: false
---
---
description: フロントエンドのテストに関するルール
globs: frontend/src/**/*.test.{ts,tsx},frontend/e2e/**/*.spec.{ts,tsx}
alwaysApply: false
---
# Frontend Test Rules

## 1. テストの種類と構成

### 1.1 ユニットテスト
- コンポーネントのテスト
- カスタムフックのテスト
- ユーティリティ関数のテスト

### 1.2 統合テスト
- 複数コンポーネントの連携テスト
- APIとの統合テスト
- WebSocket通信のテスト

### 1.3 E2Eテスト
- ユーザーフローのテスト
- クリティカルパスのテスト

## 2. テストフレームワーク

- Vitestを使用したユニットテスト
- React Testing Libraryを使用したコンポーネントテスト
- Playwrightを使用したE2Eテスト
- MSWを使用したAPIモック

## 3. テストの命名規則

### 3.1 テストファイル
```typescript
// コンポーネントテスト
Button.test.tsx
UserProfile.test.tsx

// フックテスト
useAuth.test.ts
useWebSocket.test.ts

// E2Eテスト
auth.spec.ts
chat.spec.ts
```

### 3.2 テストケース
```typescript
describe('Button component', () => {
  it('should render with primary variant', () => {
    // テスト内容
  });

  it('should handle click events', () => {
    // テスト内容
  });
});
```

## 4. コンポーネントテスト

### 4.1 レンダリングテスト
```typescript
import { render, screen } from '@testing-library/react';

test('renders button with text', () => {
  render(<Button>Click me</Button>);
  expect(screen.getByText('Click me')).toBeInTheDocument();
});
```

### 4.2 イベントハンドリング
```typescript
import { render, fireEvent } from '@testing-library/react';

test('calls onClick when clicked', () => {
  const handleClick = vi.fn();
  render(<Button onClick={handleClick}>Click me</Button>);
  
  fireEvent.click(screen.getByText('Click me'));
  expect(handleClick).toHaveBeenCalled();
});
```

## 5. カスタムフックテスト

### 5.1 フックのテスト
```typescript
import { renderHook, act } from '@testing-library/react';

test('useCounter hook', () => {
  const { result } = renderHook(() => useCounter());
  
  act(() => {
    result.current.increment();
  });
  
  expect(result.current.count).toBe(1);
});
```

### 5.2 非同期フックのテスト
```typescript
test('useAuth hook', async () => {
  const { result } = renderHook(() => useAuth());
  
  await act(async () => {
    await result.current.login({ email: 'test@example.com', password: 'password' });
  });
  
  expect(result.current.user).toBeDefined();
});
```

## 6. APIモック

### 6.1 MSWの設定
```typescript
import { setupServer } from 'msw/node';
import { rest } from 'msw';

const server = setupServer(
  rest.get('/api/users', (req, res, ctx) => {
    return res(ctx.json([{ id: 1, name: 'Test User' }]));
  })
);

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());
```

### 6.2 APIテスト
```typescript
test('fetches users', async () => {
  const { result } = renderHook(() => useUsers());
  
  await act(async () => {
    await result.current.fetchUsers();
  });
  
  expect(result.current.users).toHaveLength(1);
});
```

## 7. E2Eテスト

### 7.1 ページナビゲーション
```typescript
test('user can navigate through pages', async ({ page }) => {
  await page.goto('/');
  await page.click('text=Login');
  await expect(page).toHaveURL('/login');
});
```

### 7.2 フォーム操作
```typescript
test('user can login', async ({ page }) => {
  await page.goto('/login');
  await page.fill('input[name="email"]', 'test@example.com');
  await page.fill('input[name="password"]', 'password');
  await page.click('button[type="submit"]');
  await expect(page).toHaveURL('/dashboard');
});
```

### 7.3 WebSocket通信
```typescript
test('chat messages are received in real-time', async ({ page }) => {
  await page.goto('/chat');
  await page.fill('input[name="message"]', 'Hello');
  await page.click('button[type="submit"]');
  
  const message = await page.waitForSelector('.message:has-text("Hello")');
  expect(message).toBeTruthy();
});
```

## 8. テストカバレッジ

- コンポーネント: 90%以上のカバレッジ
- カスタムフック: 100%のカバレッジ
- ユーティリティ関数: 100%のカバレッジ
- E2Eテスト: 主要なユーザーフローをカバー 